<?php

/**
 *   A Letsencrypt implementation of the Certificate service type.
 */
class Provision_Service_Certificate_Letsencrypt extends Provision_Service_Certificate {
  public $service = 'Letsencrypt';

  /**
   * Initialize this class, including option handling.
   */
  function init_server() {
    parent::init_server();

    /**
     * Register configuration classes for the create_config / delete_config methods.
     */
    $this->configs['server'][] = 'Provision_Config_Letsencrypt';

    /**
     * Configurable values.
     */
    $this->server->setProperty('letsencrypt_field', 'default');

    /**
     * Non configurable values.
     */
    $this->server->letsencrypt_script_path = $this->server->aegir_root . '/config/letsencrypt';
    $this->server->letsencrypt_config_path = $this->server->aegir_root . '/config/letsencrypt.d';
    $this->server->letsencrypt_challenge_path = $this->server->aegir_root . '/config/letsencrypt.d/well-known/acme-challenge';
  }


  /**
   * Pass additional values to the config file templates.
   *
   * Even though the $server variable will be available in your template files,
   * you may wish to pass additional calculated values to your template files.
   *
   * Consider this something like the hook_preprocess stuff in drupal.
   */
  function config_data($config = null, $class = null) {
    // This format of calling the parent is very important!
    $data = parent::config_data($config, $class);

    /**
     * This value will become available as $letsencrypt_current_time
     * in all the config files generated by this service.
     *
     * You could also choose to only conditionally pass values based on
     * the parameters.
     */
    $data['letsencrypt_current_time'] = date(DATE_COOKIE, time());

    return $data;
  }

  /**
   * Implementation of service verify.
   *
   * Called from drush_certificate_provision_verify().
   */
  function verify() {
    parent::verify();
    if ($this->context->type == 'server') {
      // Create the configuration file directory.
      provision_file()->create_dir($this->server->letsencrypt_config_path, dt("Let's Encrypt configuration directory"), 0711);
      // Create the ACME challenge directory.
      provision_file()->create_dir($this->server->letsencrypt_challenge_path, dt("Let's Encrypt ACME challenge directory"), 0711);
      // Copy the script directory into place.
      $source = dirname(dirname(dirname(dirname(__FILE__)))) . '/bin/';
      if (drush_copy_dir($source, $this->server->letsencrypt_script_path, FILE_EXISTS_OVERWRITE)) {
        drush_log("Copied Let's Encrypt script directory into place.", 'success');
      }
      // Sync the directory to the remote server if needed.
    #  $this->sync($this->server->letsencrypt_config_path);
    }
    if ($this->context->type == 'site') {
      $script_path = d()->server->letsencrypt_script_path;
      $config_path = d()->server->letsencrypt_config_path;
      $uri = d()->uri;
      drush_log(dt("Generating Let's Encrypt certificates."));
      $result = drush_shell_exec("{$script_path}/letsencrypt.sh -c -f {$script_path}/config.staging --out {$config_path} -d {$uri} -x");
      foreach (drush_shell_exec_output() as $line) {
        drush_log($line);
      }
      if ($result) {
        drush_log(dt("Successfully generated Let's Encrypt certificates."), 'success');
      }
      else {
        drush_log(dt("Failed to generate Let's Encrypt certificates."), 'warning');
      }
      $cert_dir = d()->server->http_ssld_path . '/' . d()->uri;
      $cert_path = $cert_dir . '/openssl.crt';
      $key_path = $cert_dir . '/openssl.key';
      $targets = array(
        'certificate' => "{$config_path}/{$uri}/cert.pem",
        'key' => "{$config_path}/{$uri}/privkey.pem",
      );
      $paths = array(
        'certificate' => $cert_path,
        'key' => $key_path,
      );
      foreach ($paths as $type => $path) {
        drush_log(dt("Moving existing :type out of the way.", array(
          ':type' => $type,
        )));
        if (file_exists($path) && !is_link($path)) {
          $new_path = $path . '.self-signed';
          if (rename($path, $new_path)) {
            drush_log(dt('Moved :path to :new_path.', array(
              ':path' => $path,
              ':new_path' => $new_path,
            )));
            drush_log(dt("Symlinking to Let's Encrypt :type.", array(
              ':type' => $type,
            )));
            // TODO: Add tokens to ProvisionFileSystem object.
            // Ref.: http://api.aegirproject.org/api/Provision/Provision%21FileSystem.php/class/Provision_FileSystem/7.x-3.x
            provision_file()->symlink($targets[$type], $path)
              ->succeed("Symlinked to Let's Encrypt " . $type)
              ->fail("Failed to symlink to Let's Encrypt " . $type);
          }
          else {
            drush_log(dt('Failed to move :path to :new_path.', array(
              ':path' => $path,
              ':new_path' => $new_path,
            )));
          }
        }
      }
    }
  }
}
