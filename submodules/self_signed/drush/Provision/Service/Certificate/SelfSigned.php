<?php

/**
 *   A SelfSigned implementation of the Certificate service type.
 */
class Provision_Service_Certificate_SelfSigned extends Provision_Service_Certificate {
  public $service = 'SelfSigned';

  /**
   * Initialize this class, including option handling.
   */
  function init_server() {
    parent::init_server();

    /**
     * Register configuration classes for the create_config / delete_config methods.
     */
    $this->configs['server'][] = 'Provision_Config_SelfSigned';

    /**
     * Configurable values.
     */
    $this->server->setProperty('self_signed_field', 'default');

    /**
     * Non configurable values.
     */
    $this->server->self_signed_config_path = $this->server->aegir_root . '/config/self_signed.d';
  }


  /**
   * Pass additional values to the config file templates.
   *
   * Even though the $server variable will be available in your template files,
   * you may wish to pass additional calculated values to your template files.
   *
   * Consider this something like the hook_preprocess stuff in drupal.
   */
  function config_data($config = null, $class = null) {
    // This format of calling the parent is very important!
    $data = parent::config_data($config, $class);

    /**
     * This value will become available as $self_signed_current_time
     * in all the config files generated by this service.
     *
     * You could also choose to only conditionally pass values based on
     * the parameters.
     */
    $data['self_signed_current_time'] = date(DATE_COOKIE, time());

    return $data;
  }

  /**
   * Implementation of service verify.
   *
   * Called from drush_certificate_provision_verify().
   */
  function verify() {
    parent::verify();
    if ($this->context->type == 'server') {
      // Create the configuration file directory.
      provision_file()->create_dir($this->server->self_signed_config_path, dt("Self-signed configuration directory"), 0711);
    }
    // Sync the directory to the remote server if needed.
    #$this->sync($this->server->self_signed_config_path);
    }
    if ($this->context->type == 'site' && $this->context->ssl_enabled > 0) {
      $config_path = d()->server->self_signed_config_path;
      $uri = d()->uri;
      drush_log(dt("Generating Self-signed certificates."));
      $result = drush_shell_exec("{$script_path}/self_signed.sh -c -f {$script_path}/config.staging --out {$config_path} -d {$uri} -x");
      foreach (drush_shell_exec_output() as $line) {
        drush_log($line);
      }
      if ($result) {
        drush_log(dt("Successfully generated Self-signed certificates."), 'success');
      }
      else {
        drush_log(dt("Failed to generate Self-signed certificates."), 'warning');
      }
    }
  }
}
